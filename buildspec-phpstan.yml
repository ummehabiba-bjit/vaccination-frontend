##Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
##SPDX-License-Identifier: MIT-0
version: 0.2
phases:
  install:
    runtime-versions:
      php: 8.2
    commands:
      - echo "installing phpstan"
      - composer require --dev phpstan/phpstan
      - echo "completed installing phpstan"
  build:
    commands:
      - echo "phpstan scan starting......"
      - vendor/bin/phpstan analyse  --error-format=json --level=1 -c phpstan.neon --memory-limit=3G --xdebug > vendor/phpstan-results.json || true
      - echo "phpstan scan completed. Analysing the results......"
  post_build:
    commands:
      - phpstan_fileerrors=$(cat vendor/phpstan-results.json | jq -r '.totals.file_errors')
      - echo "phpstan errors count is "  $phpstan_fileerrors
      - | 
        if [ $phpstan_fileerrors -gt 0 ]; then     
          jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"PHPStan\", \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"productName\": \"Vaccination Frontend\", \"companyName\": \"DevSecOps\", \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \"build_id\": env.CODEBUILD_BUILD_ID, \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \"report\": . }" vendor/phpstan-results.json > payload.json
          echo "There are some errors/vulnerabilities reported in the phpstan scan. Stopping the build process.";
          cat payload.json
          aws lambda invoke --function-name ImportVulToSecurityHub --payload fileb://payload.json phpstan_scan_report.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
          cat phpstan_scan_report.json
          echo " completed gathering the phpstan report";
          # exit 1;
        else
          echo "no vulnerabilities found in phpstan scan"
        fi     
artifacts:
  type: zip
  files: 
    - '/codebuild/output/tmp/script.sh'
    - '**/*'